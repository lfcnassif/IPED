##################################################################################################################
# Configuration for Regular Expression search task.
#
# Syntax:
# name , prefix, suffix, ignoreCase = regex
#
# name: 	(required) regex name
# regex: 	(required) regular expression, do not accept groups nor backreferences, syntax on http://www.brics.dk/automaton/doc/index.html
# prefix: 	number of prefix chars which will be removed from matches (default 0)
# suffix: 	number of suffix chars which will be removed from matches (default 0)
# ignoreCase: tells if capitalization should be ignored (default true)
#
##################################################################################################################

# If enabled, format/normalize regex matches using registered validators.
# However regex results may not be highlighted in content preview.

formatRegexMatches = false

# Register REGEX below:

EMAIL , 0 , 0 , true = [0-9a-z][0-9a-z\+\.\_\%\-]{1,64}\@[0-9a-z\-]{2,64}(\.[0-9a-z\-]{2,25}){1,3}

URL = ((https?|ftp|file):/{2,3}|www)[-a-z0-9\+\&\@\#\\/\%\?\=\~_\|!:,\.;]+
			
IP , 1 , 1 = [^0-9\.]([^0].?.?&<1-255>)(\.(([^0].?.?&<1-255>)|0)){3}[^0-9\.]

MAC_ADDRESS , 0 , 0 , false = ([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])
			
MONEY , 1 , 1 , false = [^0-9\.\,]((([^0].?.?&<1-999>)(((\.[0-9]{3}){1,4}\,[0-9]{2})|((\,[0-9]{3}){1,4}\.[0-9]{2})))|(\$\s{0,10}<1-999>(((\.[0-9]{3}){1,4}(\,[0-9]{2})?)|((\,[0-9]{3}){1,4}(\.[0-9]{2})?))))[^0-9\.\,]
			
# BANK_ACCOUNT , 0 , 0 , true = (ag|agen|ag[eê]ncia)(\s|\.|:){0,10}[0-9]{4}(\-?[0-9xX])?.{0,10}(cc|conta|conta[ \-]corrente)(\s|\.|:){0,10}[0-9]{5,11}(\-?[0-9xX])?

CREDIT_CARD, 1 , 1 = [^0-9]([0-9]{4} ){3}[0-9]{4}[^0-9]

SWIFT, 1 , 1 , false = [^A-Z][A-Z]{4}[A-Z]{2}[A-Z0-9]{2}[a-zA-Z0-9]{3}[^a-zA-Z0-9]

# IBAN, 1 , 1 , false = [^A-Z][A-Z]{2}[0-9]{2}[A-Z0-9]{5,30}[^A-Z0-9]

PHONE = ((()|(Tel|Telefone|Phone)(:| |: )| )(\+55 |\+55|())(\([1-9]{2}\)|[1-9]{2})( |\-|())(9[0-9]{4}|[3-5][0-9]{3})( |\-|\.)([0-9]{4})([^0-9]|()))|(((Tel|Telefone|Phone)(:| |: )| )(\+55 |\+55|())(\([1-9]{2}\)|[1-9]{2})( |\-|())(9[0-9]{4}|[3-5][0-9]{3})( |\-|\.|())([0-9]{4})([^0-9]|()))

CRIPTOCOIN_BITCOIN_ADDRESS, 1, 1, false = ([^0-9a-zA-Z][13][a-km-zA-HJ-NP-Z1-9]{25,34}[^0-9a-zA-Z])|([^0-9a-zA-Z]bc1[ac-hj-np-z02-9]{11,71}[^0-9a-zA-Z])
# The following bitcoin regexes where adapted from Zollner, Stephan & Choo, Kim-Kwang Raymond & Le-Khac, Nhien-An. (2019). An Automated Live Forensic and Postmortem Analysis tool for Bitcoin on Windows Systems. IEEE Access. PP. 10.1109/ACCESS.2019.2948774.
CRIPTOCOIN_BITCOIN_BIP38_ENC_PRIV_K, 1, 1, false = [^0-9a-zA-Z]6P[a-km-zA-HJ-NP-Z1-9]{56}[^0-9a-zA-Z]
CRIPTOCOIN_BITCOIN_WIF_PRIV_K_UNC_PUB_K, 1, 1, false = [^0-9a-zA-Z]5[a-km-zA-HJ-NP-Z1-9]{50}[^0-9a-zA-Z]
CRIPTOCOIN_BITCOIN_WIF_PRIV_K_COMP_PUB_K, 1, 1, false = [^0-9a-zA-Z][KL][a-km-zA-HJ-NP-Z1-9]{51}[^0-9a-zA-Z]
CRIPTOCOIN_BITCOIN_BIP32_HD_XPRV_KEY, 1, 1, false = [^0-9a-zA-Z]xprv[a-km-zA-HJ-NP-Z1-9]{107,108}[^0-9a-zA-Z]
CRIPTOCOIN_BITCOIN_BIP32_HD_XPUB_KEY, 1, 1, false = [^0-9a-zA-Z]xpub[a-km-zA-HJ-NP-Z1-9]{107,108}[^0-9a-zA-Z]


CRIPTOCOIN_MONERO, 1, 1, false = [^0-9a-zA-Z]4[0-9AB][1-9A-HJ-NP-Za-km-z]{93}[^0-9a-zA-Z]

CRIPTOCOIN_BITCOIN_CASH_CASHADDR, 0, 1, false = (bitcoincash:)?[a-z0-9]{20,87}[^0-9a-zA-Z]

CRIPTOCOIN_RIPPLE, 1, 1, false = [^0-9a-zA-Z](r|X)[a-km-zA-HJ-NP-Z1-9]{20,55}[^0-9a-zA-Z]

# Old Ethereum addresses before 2017 do not have checksums and will be rejected by the internal validator.
# If you want to collect those addresses, copy and paste regex below and change its name
# but be warned that you will get a lot of false positives.
CRIPTOCOIN_ETHEREUM, 0, 1, false = 0x[a-fA-F0-9]{40}[^a-fA-F0-9]

# Regexes below are commented out because they do not have validators currently and return many false positives, you could enable them if necessary

#CRIPTOCOIN_DOGECOIN, 1, 1, false = [^0-9a-zA-Z]D{1}[5-9A-HJ-NP-U]{1}[1-9A-HJ-NP-Za-km-z]{32}[^0-9a-zA-Z]

#CRIPTOCOIN_NEO, 1, 1, false = [^0-9a-zA-Z]A[0-9a-zA-Z]{33}[^0-9a-zA-Z]

#CRIPTOCOIN_DASH, 1, 1, false = [^0-9a-zA-Z]X[1-9A-HJ-NP-Za-km-z]{33}[^0-9a-zA-Z]